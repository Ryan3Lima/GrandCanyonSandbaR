stop(FALSE)
}
# specify the elevation in meters
Elevation_meters <- 911.345
if(Elevation_meters >= min_E & Elevation_meters <= max_E){
print(TRUE)
} else {
stop(FALSE)
}
# specify the elevation in meters
Elevation_meters <- 913.345
if(Elevation_meters >= min_E & Elevation_meters <= max_E){
print(TRUE)
} else {
stop(FALSE)
}
# specify the elevation in meters
Elevation_meters <- 916.345
if(Elevation_meters >= min_E & Elevation_meters <= max_E){
print(TRUE)
} else {
stop(FALSE)
}
# specify the elevation in meters
Elevation_meters <- 919.345
if(Elevation_meters >= min_E & Elevation_meters <= max_E){
print(TRUE)
} else {
stop(FALSE)
}
# specify the elevation in meters
Elevation_meters <- 915.345
if(Elevation_meters >= min_E & Elevation_meters <= max_E){
print(TRUE)
} else {
stop(FALSE)
}
grid_index <- which.min(abs(Grid_site$Elevation - Elevation_meters))
grid_index
Grid_site[grid_index]
Grid_site[grid_index,]
grid_row <- Grid_site[grid_index,]
grid_row
# specify unit
Qunit = 'CFS'
print(site_name)
print(Qunit)
print(Elevation_meters)
# Check if valid Qunit
if(!Qunit %in% c("CFS", "CMS")) {
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
# Check if valid Qunit
if(!Qunit %in% c("CFS", "CMS")) {
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
# specify unit
Qunit = 'CFS'
# Check if valid Qunit
if(Qunit %in% c("CFS", "CMS")) {
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
# Check if valid Qunit
if(Qunit %in% c("CFS", "CMS")) {
printColored("Valid Qunit")}
# Check if valid Qunit
if(Qunit %in% c("CFS", "CMS")) {
printColored("Valid Qunit")}else{
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
# specify unit
Qunit = 'CFsS'
# Check if valid Qunit
if(Qunit %in% c("CFS", "CMS")) {
printColored("Valid Qunit")}else{
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
grid_row
if(Qunit == 'CFS'){
dat <- grid_row %>%
select(Elevation,CFS_lower,CFS_median,CFS_upper)
printColored(dat,'green')}else{
dat <- grid_row %>%
select(Elevation,CMS_lower,CMS_median,CMS_upper)
printColored(dat,'blue')
}
if(Qunit == 'CFS'){
dat <- grid_row$CFS_median
printColored(grid_row,'green')} if(Qunit == 'CMS')
if(Qunit == 'CFS'){
dat <- grid_row$CFS_median
printColored(grid_row,'green')
}else if(Qunit == 'CMS')
if(Qunit == 'CFS'){
dat <- grid_row$CFS_median
printColored(grid_row,'green')
}else if{(Qunit == 'CMS')
if(Qunit == 'CFS'){
dat <- grid_row$CFS_median
printColored(grid_row,'green')
}else if{(Qunit == 'CMS')
if (Qunit == 'CFS') {
dat <- grid_row$CFS_median
printColored(grid_row, 'green')
} else if (Qunit == 'CMS') {
dat <- grid_row$CMS_median
printColored(grid_row, 'blue')
} else {
stop('Something went terribly wrong')
}
print(Qunit)
# specify unit
Qunit = 'CFS'
if (Qunit == 'CFS') {
dat <- grid_row$CFS_median
printColored(grid_row, 'green')
} else if (Qunit == 'CMS') {
dat <- grid_row$CMS_median
printColored(grid_row, 'blue')
} else {
stop('Something went terribly wrong')
}
Grid_site
grid_row
row_as_list <- as.list(grid_row[1, ])
row_as_list
if (Qunit == 'CFS') {
mes1 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CFS_median,' CFS. Access using ReturnedList$CFS_median')
printColored(mes1, 'green')
} else if (Qunit == 'CMS') {
mes2 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CMS_median,' CMS. Access using ReturnedList$CMS_median')
printColored(mes2, 'blue')
} else {
stop('Something went terribly wrong')
}
# specify unit
Qunit = 'CMS'
if (Qunit == 'CFS') {
mes1 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CFS_median,' CFS. Access using ReturnedList$CFS_median')
printColored(mes1, 'green')
} else if (Qunit == 'CMS') {
mes2 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CMS_median,' CMS. Access using ReturnedList$CMS_median')
printColored(mes2, 'blue')
} else {
stop('Something went terribly wrong')
}
find_Q_from_WSE <- function(Sitename, Elevation, Unit = 'CFS'){
# check if sitename valid
validSite(Sitename)
# check if valid site elevation
E_range <- findSiteElevation(Sitename)
min_E <- E_range[1]
max_E <- E_range[2]
if(Elevation >= min_E & Elevation <= max_E){
printColored("Valid Elevation",'blue')
} else {
stop(paste0("Invalid Elevation, must be within range:",E_range))
}
# Check if valid Qunit
if(Uunit %in% c("CFS", "CMS")) {
printColored("Valid Qunit")}else{
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
Grid_site <- StageDischargeGrids[[Sitename]]
Grid_index <- which.min(abs(Grid_site$Elevation - Elevation))
Grid_row <- Grid_site[Grid_index,]
row_as_list <- as.list(Grid_row[1, ])
if (Qunit == 'CFS') {
mes1 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CFS_median,' CFS. Access using ReturnedList$CFS_median')
printColored(mes1, 'green')
} else if (Qunit == 'CMS') {
mes2 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CMS_median,' CMS. Access using ReturnedList$CMS_median')
printColored(mes2, 'blue')
} else {
stop('Something went terribly wrong, probably the wrong unit')
}
return(row_as_list)
}
out<- find_Q_from_WSE(SandbarSites[2],915.345)
find_Q_from_WSE <- function(Sitename, Elevation, Unit = 'CFS'){
# check if sitename valid
validSite(Sitename)
# check if valid site elevation
E_range <- findSiteElevation(Sitename)
min_E <- E_range[1]
max_E <- E_range[2]
if(Elevation >= min_E & Elevation <= max_E){
printColored("Valid Elevation",'blue')
} else {
stop(paste0("Invalid Elevation, must be within range:",E_range))
}
# Check if valid Qunit
if(Unit %in% c("CFS", "CMS")) {
printColored("Valid Qunit")}else{
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
Grid_site <- StageDischargeGrids[[Sitename]]
Grid_index <- which.min(abs(Grid_site$Elevation - Elevation))
Grid_row <- Grid_site[Grid_index,]
row_as_list <- as.list(Grid_row[1, ])
if (Qunit == 'CFS') {
mes1 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CFS_median,' CFS. Access using ReturnedList$CFS_median')
printColored(mes1, 'green')
} else if (Qunit == 'CMS') {
mes2 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CMS_median,' CMS. Access using ReturnedList$CMS_median')
printColored(mes2, 'blue')
} else {
stop('Something went terribly wrong, probably the wrong unit')
}
return(row_as_list)
}
out<- find_Q_from_WSE(SandbarSites[2],915.345)
find_Q_from_WSE <- function(Sitename, Elevation, Unit = 'CFS'){
# check if sitename valid
validSite(Sitename)
# check if valid site elevation
E_range <- findSiteElevation(Sitename)
min_E <- E_range[1]
max_E <- E_range[2]
if(Elevation >= min_E & Elevation <= max_E){
printColored("Valid Elevation",'green')
} else {
stop(paste0("Invalid Elevation, must be within range:",E_range))
}
# Check if valid Qunit
if(Unit %in% c("CFS", "CMS")) {
printColored("Valid Qunit")}else{
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
Grid_site <- StageDischargeGrids[[Sitename]]
Grid_index <- which.min(abs(Grid_site$Elevation - Elevation))
Grid_row <- Grid_site[Grid_index,]
row_as_list <- as.list(Grid_row[1, ])
if (Qunit == 'CFS') {
mes1 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CFS_median,' CFS. Access using ReturnedList$CFS_median')
printColored(mes1, 'green')
} else if (Qunit == 'CMS') {
mes2 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CMS_median,' CMS. Access using ReturnedList$CMS_median')
printColored(mes2, 'blue')
} else {
stop('Something went terribly wrong, probably the wrong unit')
}
return(row_as_list)
}
out<- find_Q_from_WSE(SandbarSites[2],915.345)
find_Q_from_WSE <- function(Sitename, Elevation, Unit = 'CFS'){
# check if sitename valid
#validSite(Sitename)
# check if valid site elevation and site name
E_range <- findSiteElevation(Sitename)
min_E <- E_range[1]
max_E <- E_range[2]
if(Elevation >= min_E & Elevation <= max_E){
printColored("Valid Elevation",'green')
} else {
stop(paste0("Invalid Elevation, must be within range:",E_range))
}
# Check if valid Qunit
if(Unit %in% c("CFS", "CMS")) {
printColored("Valid Qunit")}else{
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
Grid_site <- StageDischargeGrids[[Sitename]]
Grid_index <- which.min(abs(Grid_site$Elevation - Elevation))
Grid_row <- Grid_site[Grid_index,]
row_as_list <- as.list(Grid_row[1, ])
if (Qunit == 'CFS') {
mes1 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CFS_median,' CFS. Access using ReturnedList$CFS_median')
printColored(mes1, 'green')
} else if (Qunit == 'CMS') {
mes2 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CMS_median,' CMS. Access using ReturnedList$CMS_median')
printColored(mes2, 'blue')
} else {
stop('Something went terribly wrong, probably the wrong unit')
}
return(row_as_list)
}
out<- find_Q_from_WSE(SandbarSites[2],915.345)
out<- find_Q_from_WSE(SandbarSites[2],925.345)
find_Q_from_WSE <- function(Sitename, Elevation, Unit = 'CFS'){
# check if sitename valid
#validSite(Sitename)
# check if valid site elevation and site name
E_range <- findSiteElevation(Sitename)
min_E <- E_range[1]
max_E <- E_range[2]
if(Elevation >= min_E & Elevation <= max_E){
printColored("Valid Elevation",'green')
} else {
stop(paste0("Invalid Elevation, must be within range:",min_E," to ",max_E ))
}
# Check if valid Qunit
if(Unit %in% c("CFS", "CMS")) {
printColored("Valid Qunit")}else{
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
Grid_site <- StageDischargeGrids[[Sitename]]
Grid_index <- which.min(abs(Grid_site$Elevation - Elevation))
Grid_row <- Grid_site[Grid_index,]
row_as_list <- as.list(Grid_row[1, ])
if (Qunit == 'CFS') {
mes1 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CFS_median,' CFS. Access using ReturnedList$CFS_median')
printColored(mes1, 'green')
} else if (Qunit == 'CMS') {
mes2 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CMS_median,' CMS. Access using ReturnedList$CMS_median')
printColored(mes2, 'blue')
} else {
stop('Something went terribly wrong, probably the wrong unit')
}
return(row_as_list)
}
out<- find_Q_from_WSE(SandbarSites[2],925.345)
SandbarSites[2]
out <- find_Q_from_WSE("0207R", 915.345)
out <- find_Q_from_WSE("0307R", 915.345)
document()
rm(list = c("find_Q_from_WSE", "printColored"))
load_all()
SandbarSites
grid <- GenerateEquallySpacedStageDischarge(sitename = '2201R') # Assumes '2201R' is a valid site in SandbarSites
# select a site
site = SandbarSites[38] # site '2201R'
# select a water surface elevation
WSE = 400.002 # 400.002 Meters in AZ state plane central
# get the estimated discharge in CFS
dat <- find_Q_from_WSE(Sitename = site,Elevation = WSE, Unit = 'CFS')
print(dat)
dat$CFS_median
dat$CFS_lower
dat$CFS_upper
#' out <- find_Q_from_WSE("0307R", 855.01)
#' out <- find_Q_from_WSE("4307R", 855.01)
#'
#' @details The function first verifies the site name and elevation against pre-stored values.
#' If the site name or elevation is invalid, it throws an error.
#' It also checks if the provided unit is valid and throws an error if not.
#' After validation, it retrieves the closest grid row to the specified elevation from a precomputed dataframe,
#' converts the relevant row to a list, and returns the discharge values for the median prediction.
#'
#' @export
find_Q_from_WSE <- function(Sitename, Elevation, Unit = 'CFS'){
# check if sitename valid
#validSite(Sitename)
# check if valid site elevation and site name
E_range <- findSiteElevation(Sitename)
min_E <- E_range[1]
max_E <- E_range[2]
if(Elevation >= min_E & Elevation <= max_E){
printColored("Valid Elevation",'green')
} else {
stop(paste0("Invalid Elevation, must be within range:",min_E," to ",max_E ))
}
# Check if valid Qunit
if(Unit %in% c("CFS", "CMS")) {
printColored("Valid Qunit")}else{
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
Grid_site <- StageDischargeGrids[[Sitename]]
Grid_index <- which.min(abs(Grid_site$Elevation - Elevation))
Grid_row <- Grid_site[Grid_index,]
row_as_list <- as.list(Grid_row[1, ])
if (Qunit == 'CFS') {
mes1 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CFS_median,' CFS. Access using ReturnedList$CFS_median')
range = row_as_list$CFS_upper - row_as_list$CFS_lower
mes11 <- paste0("The uncertainty in this discharge measurment is:",range, " CFS ")
printColored(mes1, 'green')
printColored(mes11, 'blue')
} else if (Qunit == 'CMS') {
mes2 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CMS_median,' CMS. Access using ReturnedList$CMS_median')
range = row_as_list$CMS_upper - row_as_list$CMS_lower
mes22 <- paste0("The uncertainty in this discharge measurment is:",range, " CMS ")
printColored(mes2, 'blue')
printColored(mes22, 'green')
} else {
stop('Something went terribly wrong, probably the wrong unit')
}
return(row_as_list)
}
# select a site
site = SandbarSites[38] # site '2201R'
# select a water surface elevation
WSE = 400.002 # 400.002 Meters in AZ state plane central
# get the estimated discharge in CFS
dat <- find_Q_from_WSE(Sitename = site,Elevation = WSE, Unit = 'CFS')
#' out <- find_Q_from_WSE("0307R", 855.01)
#' out <- find_Q_from_WSE("4307R", 855.01)
#'
#' @details The function first verifies the site name and elevation against pre-stored values.
#' If the site name or elevation is invalid, it throws an error.
#' It also checks if the provided unit is valid and throws an error if not.
#' After validation, it retrieves the closest grid row to the specified elevation from a precomputed dataframe,
#' converts the relevant row to a list, and returns the discharge values for the median prediction.
#'
#' @export
find_Q_from_WSE <- function(Sitename, Elevation, Unit = 'CFS'){
# check if sitename valid
#validSite(Sitename)
# check if valid site elevation and site name
E_range <- findSiteElevation(Sitename)
min_E <- E_range[1]
max_E <- E_range[2]
if(Elevation >= min_E & Elevation <= max_E){
printColored("Valid Elevation",'green')
} else {
stop(paste0("Invalid Elevation, must be within range:",min_E," to ",max_E ))
}
# Check if valid Qunit
if(Unit %in% c("CFS", "CMS")) {
printColored("Valid Qunit")}else{
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
Grid_site <- StageDischargeGrids[[Sitename]]
Grid_index <- which.min(abs(Grid_site$Elevation - Elevation))
Grid_row <- Grid_site[Grid_index,]
row_as_list <- as.list(Grid_row[1, ])
if (Qunit == 'CFS') {
mes1 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CFS_median,' CFS. Access using ReturnedList$CFS_median')
range = row_as_list$CFS_upper - row_as_list$CFS_lower
mes11 <- paste0("The uncertainty in this discharge measurment is: (+/-) ",range/2, " CFS ")
printColored(mes1, 'green')
printColored(mes11, 'blue')
} else if (Qunit == 'CMS') {
mes2 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CMS_median,' CMS. Access using ReturnedList$CMS_median')
range = row_as_list$CMS_upper - row_as_list$CMS_lower
mes22 <- paste0("The uncertainty in this discharge measurment is: (+/-)",range/2, " CMS ")
printColored(mes2, 'blue')
printColored(mes22, 'green')
} else {
stop('Something went terribly wrong, probably the wrong unit')
}
return(row_as_list)
}
# get the estimated discharge in CFS
dat <- find_Q_from_WSE(Sitename = site,Elevation = WSE, Unit = 'CFS')
dat$CFS_median
dat$CFS_lower
dat$CFS_upper
#' out <- find_Q_from_WSE("0307R", 855.01)
#' out <- find_Q_from_WSE("4307R", 855.01)
#'
#' @details The function first verifies the site name and elevation against pre-stored values.
#' If the site name or elevation is invalid, it throws an error.
#' It also checks if the provided unit is valid and throws an error if not.
#' After validation, it retrieves the closest grid row to the specified elevation from a precomputed dataframe,
#' converts the relevant row to a list, and returns the discharge values for the median prediction.
#'
#' @export
find_Q_from_WSE <- function(Sitename, Elevation, Unit = 'CFS'){
# check if sitename valid
#validSite(Sitename)
# check if valid site elevation and site name
E_range <- findSiteElevation(Sitename)
min_E <- E_range[1]
max_E <- E_range[2]
if(Elevation >= min_E & Elevation <= max_E){
printColored("Valid Elevation",'green')
} else {
stop(paste0("Invalid Elevation, must be within range:",min_E," to ",max_E ))
}
# Check if valid Qunit
if(Unit %in% c("CFS", "CMS")) {
printColored("Valid Qunit")}else{
stop("Invalid Qunit. Choose either 'CFS' or 'CMS'")
}
Grid_site <- StageDischargeGrids[[Sitename]]
Grid_index <- which.min(abs(Grid_site$Elevation - Elevation))
Grid_row <- Grid_site[Grid_index,]
row_as_list <- as.list(Grid_row[1, ])
if (Unit == 'CFS') {
mes1 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CFS_median,' CFS. Access using ReturnedList$CFS_median')
range = row_as_list$CFS_upper - row_as_list$CFS_lower
mes11 <- paste0("The uncertainty in this discharge measurment is: (+/-) ",range/2, " CFS ")
printColored(mes1, 'green')
printColored(mes11, 'blue')
} else if (Unit == 'CMS') {
mes2 <- paste0('The median predicted discharge at the selected elevation is: ',row_as_list$CMS_median,' CMS. Access using ReturnedList$CMS_median')
range = row_as_list$CMS_upper - row_as_list$CMS_lower
mes22 <- paste0("The uncertainty in this discharge measurment is: (+/-)",range/2, " CMS ")
printColored(mes2, 'blue')
printColored(mes22, 'green')
} else {
stop('Something went terribly wrong, probably the wrong unit')
}
return(row_as_list)
}
# get the estimated discharge in CFS
dat <- find_Q_from_WSE(Sitename = site,Elevation = WSE, Unit = 'CFS')
dat$CFS_median
dat$CFS_lower
dat$CFS_upper
dat$CFS_upper - dat$CFS_lower
# select a water surface elevation
WSE = 395.002 # 400.002 Meters in AZ state plane central
# get the estimated discharge in CFS
dat <- find_Q_from_WSE(Sitename = site,Elevation = WSE, Unit = 'CFS')
dat$CFS_median
dat$CFS_upper - dat$CFS_lower
document()
rm(list = c("find_Q_from_WSE"))
load_all()
document()
library(roxygen2)
check()
install.packages(c("htmltools", "roxygen2"))
install.packages(c("htmltools", "roxygen2"))
install.packages(c("htmltools", "roxygen2"))
install.packages(c("htmltools", "roxygen2"))
check()
library(devtools)
check()
library(htmltools)
install.packages("htmltools")
